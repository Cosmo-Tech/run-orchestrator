{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Run Template Orchestrator","text":"<p>This repository contains the new Run Template Orchestrator used in the latest Cosmotech Solutions</p>"},{"location":"#installation","title":"Installation","text":"<p>You need to add the orchestrator to the environment you want to use it on.</p> <p>The following guide will suppose you have a CosmoTech Project called <code>MyProject</code> which is in the folder <code>~/MyProject</code></p> <p>It will also suppose you have a build version of the CosmoTech SDK in the folder <code>~/Cosmotech/Studio</code></p> <p>Create a virtual environment and add dependencies (in bash)</p> <pre><code># First move to your project folder\ncd ~/MyProject\n# Next create and activate a venv (here .venv)\npython -m venv .venv\nsource .venv/bin/activate\n# Update your python path with the bindings from the sdk\nexport PYTHONPATH=$PYTHONPATH:~/Cosmotech/Studio/lib/python/site-packages\n# Add the local wrappers for your solution to the python path\nexport PYTHONPATH=$PYTHONPATH:~/MyProject/Generated/Build/Wrapping:~/MyProject/Generated/Build/Lib\n# Finally install the dependencies for your project (they should be in code/requirements.txt)\npip install -r code/requirements.txt\n</code></pre> Note <p>If you use the Cosmotech CLI <code>csmcli</code> you can replace the use of the <code>PYTHONPATH</code> environment variable by calls to <code>csm exec</code></p> <p>After all those commands you environment should be ready for a test, but first let's install the repository</p> Install from sourcesInstall using Pypi <p>Install the orchestrator from git sources</p> <pre><code>pip install git+ssh://git@github.com/Cosmo-Tech/run-orchestrator.git\n</code></pre> <p>Install the orchestrator from local sources</p> <pre><code>git clone ssh://git@github.com/Cosmo-Tech/run-orchestrator.git\npip install ./run-orchestrator\n</code></pre> <p>Install using pip</p> <pre><code>pip install cosmotech-run-orchestrator\n</code></pre> <p>After installation a few commands are made available, documentation for each is available on the commands documentation page</p> <p>Autocompletion</p> <p>Run the following command <pre><code>_CSM_ORC_COMPLETE=bash_source csm-orc &gt; ~/.csm-orc-complete.bash\n</code></pre> then add the following line at the end of your <code>.bashrc</code> file <pre><code>. ~/.csm-orc-complete.bash\n</code></pre></p>"},{"location":"License/","title":"License","text":"<p>Copyright - 2023 - 2023 - Cosmo Tech</p> <p>You are authorized to use this Cosmo Tech software following the execution of a specific agreement with Cosmo Tech or with an authorized licensee of Cosmo Tech.</p> <p>Accordingly you should refer to this specific agreement for the purpose of the extent of the use that is permitted. This use shall mainly consist in using, displaying and executing the Cosmo Tech software for your own needs.</p> <p>Except otherwise provided in the above-mentioned specific agreement: - you are not allowed to use this Cosmo Tech software for commercial purpose or to redistribute it without prior authorization from Cosmo Tech; - you are not allowed to copy, duplicate, modify, adapt and translate this Cosmo Tech software except as authorized under section L122-6-1 of the French Intellectual Property Code or specifically under the specific agreement with Cosmo Tech; - you must not remove this notice or any mention related to the copyright of Cosmo Tech;</p> <p>This Cosmo Tech software is provided 'as is', without any express or implied warranty towards the users.</p> <p>Any software generated through the use of this Cosmo Tech software shall be your own property to the extent this software does not contain any part of Cosmo Tech software source code.</p>"},{"location":"Validator/","title":"Semantic Validator","text":"<p>Simple semantic validator,</p> <p>Paste your orchestration file in <code>text</code> mode and it will be semantically validated</p> <p>Page made with https://github.com/josdejong/svelte-jsoneditor</p>"},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags : </p>"},{"location":"tags/#brewery","title":"Brewery","text":"<ul> <li>Brewery</li> <li>Integration with a CosmoTech Simulator</li> </ul>"},{"location":"tags/#legacy","title":"Legacy","text":"<ul> <li>Integration with a CosmoTech Simulator</li> </ul>"},{"location":"tags/#tutorial","title":"Tutorial","text":"<ul> <li>Brewery</li> <li>Integration with a CosmoTech Simulator</li> <li>My First Orchestrator</li> <li>Concerning Configuration</li> </ul>"},{"location":"commands/","title":"Commands","text":"<p>The following commands are made available to you after installation of the orchestrator</p> OrchestratorLegacy helper commandsHelper commands <p> Orchestrator <p>The main CosmoTech Orchestrator command</p> <p>  Orchestrator </p> <p> Download scenario data <p>A script allowing to download dataset and parameters from a scenario</p> <p>  Data downloader Download Cloud based Steps <p>A script used to download Run Template Handlers sourced in the cloud using the Cosmotech API</p> <p>  Download Cloud Steps </p> <p> Run step <p>A script to run Steps from a Run Template</p> <p>  Run steps </p> <p> Send Simulation Data to ADX <p>A script to send Simulation input data (Datasets/Parameters) to Azure Data Explorer</p> <p>  Simulation to ADX </p> <p> Legacy generator <p>A helper command to generate new run template json files from the Cosmotech API old format</p> <p>  Legacy generator </p> <p> Parameter folder initialization <p>A helper command to initialize Parameters folder for local runs</p> <p>  Parameter Initialization </p>"},{"location":"commands/download_cloud_steps/","title":"Download Steps from cloud","text":"<p>Command help</p> <pre><code>&gt; csm-orc fetch-cloud-steps --help\n\n Usage: csm-orc fetch-cloud-steps [OPTIONS]                                                                           \n\n Uses environment variables to download cloud based Template steps Requires a valid Azure connection either with:     \n\n  \u2022 The AZ cli command: az login                                                                                      \n  \u2022 A triplet of env var AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET                                        \n\n\u256d\u2500 OPTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --organization-id    o-##########         The id of an organization in the cosmotech api                        \u2502\n\u2502                                              ENV: CSM_ORGANIZATION_ID                                              \u2502\n\u2502                                              [required]                                                            \u2502\n\u2502 *  --workspace-id       w-##########         The id of a solution in the cosmotech api                             \u2502\n\u2502                                              ENV: CSM_WORKSPACE_ID                                                 \u2502\n\u2502                                              [required]                                                            \u2502\n\u2502 *  --run-template-id    NAME                 The name of the run template in the cosmotech api                     \u2502\n\u2502                                              ENV: CSM_RUN_TEMPLATE_ID                                              \u2502\n\u2502                                              [required]                                                            \u2502\n\u2502 *  --handler-list       HANDLER,...,HANDLER  A list of handlers to download (comma separated)                      \u2502\n\u2502                                              ENV: CSM_CONTAINER_MODE                                               \u2502\n\u2502                                              [required]                                                            \u2502\n\u2502 *  --api-url            URL                  The url to a Cosmotech API                                            \u2502\n\u2502                                              ENV: CSM_API_URL                                                      \u2502\n\u2502                                              [required]                                                            \u2502\n\u2502 *  --api-scope          URI                  The identification scope of a Cosmotech API                           \u2502\n\u2502                                              ENV: CSM_API_SCOPE                                                    \u2502\n\u2502                                              [required]                                                            \u2502\n\u2502    --web-help                                Open the web documentation                                            \u2502\n\u2502    --help                                    Show this message and exit.                                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"commands/legacy_json_generator/","title":"Generate legacy run template json file","text":"<p>Help command</p> <pre><code>&gt; csm-orc gen-from-legacy --help\n\n Usage: csm-orc gen-from-legacy [OPTIONS] COMMAND [ARGS]...                                                           \n\n Base command for the json generator using legacy files                                                               \n Check the help of the sub commands for more information:                                                             \n\n  \u2022 cloud requires access to a fully deployed solution                                                                \n  \u2022 solution requires a Solution.yaml file                                                                            \n\n\u256d\u2500 OPTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --web-help      Open the web documentation                                                                         \u2502\n\u2502 --help          Show this message and exit.                                                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 cloud     Connect to the cosmotech API to download a run template and generate an orchestrator file at OUTPUT      \u2502\n\u2502 solution  Read SOLUTION_FILE to get a RUN_TEMPLATE_ID and generate an orchestrator file at OUTPUT                  \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> Generate json from Soluton.yaml<pre><code>&gt; csm-orc gen-from-legacy solution --help\n\n Usage: csm-orc gen-from-legacy solution [OPTIONS] SOLUTION_FILE OUTPUT                                               \n                                         RUN_TEMPLATE_ID                                                              \n\n Read SOLUTION_FILE to get a RUN_TEMPLATE_ID and generate an orchestrator file at OUTPUT                              \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  SOLUTION_FILE      FILE  [required]                                                                             \u2502\n\u2502 *  OUTPUT             FILE  [required]                                                                             \u2502\n\u2502 *  RUN-TEMPLATE-ID    TEXT  [required]                                                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 OPTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --describe/--no-describe      Show a description of the generated template after generation                        \u2502\n\u2502                               DEFAULT: no-describe                                                                 \u2502\n\u2502 --web-help                    Open the web documentation                                                           \u2502\n\u2502 --help                        Show this message and exit.                                                          \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> Generate json from CosmoTech API<pre><code>&gt; csm-orc gen-from-legacy cloud --help\n\n Usage: csm-orc gen-from-legacy cloud [OPTIONS] OUTPUT                                                                \n\n Connect to the cosmotech API to download a run template and generate an orchestrator file at OUTPUT                  \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  OUTPUT    FILE  [required]                                                                                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 OPTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --api-url                   URL           The url to a Cosmotech API                                            \u2502\n\u2502                                              ENV: CSM_API_URL                                                      \u2502\n\u2502                                              [required]                                                            \u2502\n\u2502 *  --api-scope                 URI           The identification scope of a Cosmotech API                           \u2502\n\u2502                                              ENV: CSM_API_SCOPE                                                    \u2502\n\u2502                                              [required]                                                            \u2502\n\u2502 *  --organization-id           o-##########  The id of an organization in the cosmotech api                        \u2502\n\u2502                                              ENV: CSM_ORGANIZATION_ID                                              \u2502\n\u2502                                              [required]                                                            \u2502\n\u2502 *  --workspace-id              w-##########  The id of a solution in the cosmotech api                             \u2502\n\u2502                                              ENV: CSM_WORKSPACE_ID                                                 \u2502\n\u2502                                              [required]                                                            \u2502\n\u2502 *  --run-template-id           NAME          The name of the run template in the cosmotech api                     \u2502\n\u2502                                              ENV: CSM_RUN_TEMPLATE_ID                                              \u2502\n\u2502                                              [required]                                                            \u2502\n\u2502    --describe/--no-describe                  Show a description of the generated template after generation         \u2502\n\u2502                                              DEFAULT: no-describe                                                  \u2502\n\u2502    --web-help                                Open the web documentation                                            \u2502\n\u2502    --help                                    Show this message and exit.                                           \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"commands/orchestrator/","title":"Run","text":"<p>Help command</p> <pre><code>&gt; csm-orc run --help\n\n Usage: csm-orc run [OPTIONS] TEMPLATE                                                                                \n\n Runs the given TEMPLATE file                                                                                         \n Commands are run as subprocess using bash -c \"&lt;command&gt; &lt;arguments&gt;\".                                                \n In case you are in a python venv, the venv is activated before any command is run.                                   \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  TEMPLATE    FILE  [required]                                                                                    \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 OPTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --dry-run/--no-dry-run              -n           Use dry-run mode                                                  \u2502\n\u2502                                                  ENV: DRY_RUN                                                      \u2502\n\u2502                                                  DEFAULT: no-dry-run                                               \u2502\n\u2502 --display-env/--no-display-env                   List all required environment variables and their documentation   \u2502\n\u2502                                                  ENV: DISPLAY_ENVIRONMENT                                          \u2502\n\u2502                                                  DEFAULT: no-display-env                                           \u2502\n\u2502 --gen-env-target                        PATH     Generate a .env file with all env vars to be filed when           \u2502\n\u2502                                                  display-env is called                                             \u2502\n\u2502                                                  ENV: GENERATE_ENVIRONMENT                                         \u2502\n\u2502 --skip-step                             STEP_ID  Define a list of steps to be skipped during this run              \u2502\n\u2502                                                  ENV: CSM_SKIP_STEPS                                               \u2502\n\u2502 --validate-only/--no-validate-only               Run only a sematic validation of the orchestrator file            \u2502\n\u2502                                                  ENV: CSM_ORCHESTRATOR_VALIDATE_ONLY                               \u2502\n\u2502 --web-help                                       Open the web documentation                                        \u2502\n\u2502 --help                                           Show this message and exit.                                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Potential Issues</p> <p>A known issue exists with graphical commands. Adding the Environment Variable <code>PATH</code> and <code>PYTHONPATH</code> (or set <code>useSystemEnvironment</code> to <code>true</code>) to a step  using a Cosmo Tech Simulator is required for the Simulator to run </p>"},{"location":"commands/orchestrator/#examples","title":"Examples","text":"JSON Schema <pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://cosmotech.com/run_template.schema.json\",\n  \"title\": \"Run Template\",\n  \"description\": \"A run template description\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"commandTemplates\": {\n      \"description\": \"A list of Commands Templates\",\n      \"type\": \"array\",\n      \"items\": {\n        \"description\": \"A Command Template describe a single executable with default properties\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"description\": \"The Id of the Command Template\",\n            \"pattern\": \"^\\\\S*$\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the command template\"\n          },\n          \"command\": {\n            \"type\": \"string\",\n            \"description\": \"The root bash command necessary to execute the template\"\n          },\n          \"arguments\": {\n            \"type\": \"array\",\n            \"description\": \"The list of default arguments passed to the command\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"useSystemEnvironment\": {\n            \"type\": \"boolean\",\n            \"description\": \"Should the system environment be fully passed to the command ?\"\n          },\n          \"environment\": {\n            \"type\": \"object\",\n            \"description\": \"The default list of Environment Variables required for the command\",\n            \"patternProperties\": {\n              \".+\": {\n                \"$ref\": \"#/$defs/environmentVariable\"\n              }\n            },\n            \"minProperties\": 1\n          }\n        },\n        \"additionalProperties\": false,\n        \"required\": [\n          \"id\",\n          \"command\"\n        ]\n      }\n    },\n    \"steps\": {\n      \"description\": \"A list of Steps descriptors\",\n      \"type\": \"array\",\n      \"items\": {\n        \"description\": \"A Step is a single instance of a Command that is scheduled to be run, can use an existing command or define its own\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"description\": \"The Id of the Step\",\n            \"pattern\": \"^\\\\S*$\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the step (override command template description)\"\n          },\n          \"commandId\": {\n            \"type\": \"string\",\n            \"description\": \"An Id for an existing command\"\n          },\n          \"command\": {\n            \"type\": \"string\",\n            \"description\": \"The root bash command necessary to execute the command\"\n          },\n          \"arguments\": {\n            \"type\": \"array\",\n            \"description\": \"The list of arguments passed to the command (replace the default one)\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"useSystemEnvironment\": {\n            \"type\": \"boolean\",\n            \"description\": \"Should the system environment be fully passed to the command ?\"\n          },\n          \"environment\": {\n            \"type\": \"object\",\n            \"description\": \"The list of Environment Variables defined for the command (replace the default one)\",\n            \"patternProperties\": {\n              \".+\": {\n                \"$ref\": \"#/$defs/environmentVariable\"\n              }\n            },\n            \"minProperties\": 1\n          },\n          \"precedents\": {\n            \"type\": \"array\",\n            \"description\": \"A list of steps that have to be run before this one\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"additionalProperties\": false,\n        \"oneOf\": [\n          {\n            \"required\": [\n              \"id\",\n              \"command\"\n            ]\n          },\n          {\n            \"required\": [\n              \"id\",\n              \"commandId\"\n            ]\n          }\n        ]\n      }\n    }\n  },\n  \"required\": [\n    \"steps\"\n  ],\n  \"$defs\": {\n    \"environmentVariable\": {\n      \"type\": \"object\",\n      \"description\": \"A environment variable descriptor\",\n      \"properties\": {\n        \"defaultValue\": {\n          \"type\": \"string\",\n          \"description\": \"The default value of the required variable, if not set, the variable has to be set in the system\"\n        },\n        \"value\": {\n          \"type\": \"string\",\n          \"description\": \"The effective value of the required variable, will override any system value\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the required Environment Variable for documentation reasons\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre> Example json file simple_example.json<pre><code>{\n  \"commandTemplates\": [\n    {\n      \"id\": \"TEMPLATE_ID\",\n      \"command\": \"echo\",\n      \"arguments\": [\n        \"list\",\n        \"of\",\n        \"arguments\",\n        \"$ENV_VALUE\"\n      ],\n      \"environment\": {\n        \"ENV_VALUE\": {\n          \"defaultValue\": \"DEFAULT\",\n          \"description\": \"An environment variable with a default value\"\n        }\n      }\n    }\n  ],\n  \"steps\": [\n    {\n      \"id\": \"UseTemplate\",\n      \"commandId\": \"TEMPLATE_ID\"\n    },\n    {\n      \"id\": \"OverrideTemplate\",\n      \"commandId\": \"TEMPLATE_ID\",\n      \"arguments\": [\n        \"Added\",\n        \"arguments\"\n      ],\n      \"environment\": {\n        \"ENV_VALUE\": {\n          \"value\": \"OVERRIDE\",\n          \"description\": \"An environment variable with a forced value\"\n        }\n      },\n      \"precedents\": [\n        \"UseTemplate\"\n      ]\n    },\n    {\n      \"id\": \"NewCommand\",\n      \"command\": \"echo\",\n      \"arguments\": [\n        \"$NO_EXIST\"\n      ],\n      \"environment\": {\n        \"NO_EXIST\": {\n          \"description\": \"An environment variable with no value\"\n        }\n      },\n      \"precedents\": [\n        \"OverrideTemplate\"\n      ]\n    }\n  ]\n}\n</code></pre> Run command with json file <p>The following code won't run by itself because <code>example.json</code> requires the EnvVar <code>NO_EXIST</code> to be set by the system run without complementary EnvVar<pre><code>csm-orc run example.json\n</code></pre> You could do the following to have it work set EnvVar with export<pre><code>export NO_EXIST=\"This value exists\"\ncsm-orc run example.json\n</code></pre> The following works too run with EnvVar for run only<pre><code>NO_EXIST=\"This value exists\" csm-orc run example.json\n</code></pre></p>"},{"location":"commands/parameters_generator/","title":"Initialize Parameters Folder","text":"<p>Help command</p> <pre><code>&gt; csm-orc init-parameters --help\n\n Usage: csm-orc init-parameters [OPTIONS] COMMAND [ARGS]...                                                           \n\n Base command to initialize parameter folders                                                                         \n Will create:                                                                                                         \n\n  \u2022 A parameters.json/parameters.csv in the folder with all parameters                                                \n  \u2022 A folder per %DATASETID% datasets with the name of the parameter                                                  \n    Check the help of the sub commands for more information:                                                          \n  \u2022 cloud requires access to a fully deployed solution                                                                \n  \u2022 solution requires a Solution.yaml file                                                                            \n\n\u256d\u2500 OPTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --web-help      Open the web documentation                                                                         \u2502\n\u2502 --help          Show this message and exit.                                                                        \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 cloud     Initialize parameter folder for given run template from CosmoTech cloud API                              \u2502\n\u2502 solution  Initialize parameter folder for given run template from a Solution yaml file                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> Initialize using Soluton.yaml<pre><code>&gt; csm-orc init-parameters solution --help\n\n Usage: csm-orc init-parameters solution [OPTIONS] SOLUTION_FILE OUTPUT_FOLDER                                        \n                                         RUN_TEMPLATE_ID                                                              \n\n Initialize parameter folder for given run template from a Solution yaml file                                         \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  SOLUTION_FILE      FILE  [required]                                                                             \u2502\n\u2502 *  OUTPUT_FOLDER      PATH  [required]                                                                             \u2502\n\u2502 *  RUN_TEMPLATE_ID    TEXT  [required]                                                                             \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 OPTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --write-json/--no-write-json      Toggle writing of parameters in json format                                      \u2502\n\u2502                                   ENV: WRITE_JSON                                                                  \u2502\n\u2502                                   DEFAULT: no-write-json                                                           \u2502\n\u2502 --write-csv/--no-write-csv        Toggle writing of parameters in csv format                                       \u2502\n\u2502                                   ENV: WRITE_CSV                                                                   \u2502\n\u2502                                   DEFAULT: write-csv                                                               \u2502\n\u2502 --web-help                        Open the web documentation                                                       \u2502\n\u2502 --help                            Show this message and exit.                                                      \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> Initialize using CosmoTech API<pre><code>&gt; csm-orc init-parameters cloud --help\n\n Usage: csm-orc init-parameters cloud [OPTIONS] OUTPUT_FOLDER                                                         \n\n Initialize parameter folder for given run template from CosmoTech cloud API                                          \n\n\u256d\u2500 Arguments \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  OUTPUT_FOLDER    PATH  [required]                                                                               \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 OPTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --api-url                       URL           The url to a Cosmotech API                                        \u2502\n\u2502                                                  ENV: CSM_API_URL                                                  \u2502\n\u2502                                                  [required]                                                        \u2502\n\u2502 *  --api-scope                     URI           The identification scope of a Cosmotech API                       \u2502\n\u2502                                                  ENV: CSM_API_SCOPE                                                \u2502\n\u2502                                                  [required]                                                        \u2502\n\u2502 *  --organization-id               o-##########  The id of an organization in the cosmotech api                    \u2502\n\u2502                                                  ENV: CSM_ORGANIZATION_ID                                          \u2502\n\u2502                                                  [required]                                                        \u2502\n\u2502 *  --workspace-id                  w-##########  The id of a solution in the cosmotech api                         \u2502\n\u2502                                                  ENV: CSM_WORKSPACE_ID                                             \u2502\n\u2502                                                  [required]                                                        \u2502\n\u2502 *  --run-template-id               NAME          The name of the run template in the cosmotech api                 \u2502\n\u2502                                                  ENV: CSM_RUN_TEMPLATE_ID                                          \u2502\n\u2502                                                  [required]                                                        \u2502\n\u2502    --write-json/--no-write-json                  Toggle writing of parameters in json format                       \u2502\n\u2502                                                  ENV: WRITE_JSON                                                   \u2502\n\u2502                                                  DEFAULT: no-write-json                                            \u2502\n\u2502    --write-csv/--no-write-csv                    Toggle writing of parameters in csv format                        \u2502\n\u2502                                                  ENV: WRITE_CSV                                                    \u2502\n\u2502                                                  DEFAULT: write-csv                                                \u2502\n\u2502    --web-help                                    Open the web documentation                                        \u2502\n\u2502    --help                                        Show this message and exit.                                       \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"commands/run_step/","title":"Run Template Step","text":"<p>Help command</p> <pre><code>&gt; csm-orc run-step --help\n\n Usage: csm-orc run-step [OPTIONS]                                                                                    \n\n Runs a list of steps of a run template in a CosmoTech project Known limitations:                                     \n\n  \u2022 The step MUST contain an executable main.py file                                                                  \n  \u2022 The engine step requires to set the env var CSM_SIMULATION if you have a run without a python engine              \n  \u2022 QT consumer in the simulator breaks the engine step when orchestrating                                            \n\n\u256d\u2500 OPTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --template    TEXT  refer to a folder contained in code/run_templates                                           \u2502\n\u2502                        ENV: CSM_RUN_TEMPLATE_ID                                                                    \u2502\n\u2502                        [required]                                                                                  \u2502\n\u2502    --steps       TEXT  A list of Steps definer in the TEMPLATE folder that will be executed (comma-separated).     \u2502\n\u2502                        Defaults to CSMDOCKER equivalent to parameters_handler,validator,prerun,engine,postrun (the \u2502\n\u2502                        legacy order)                                                                               \u2502\n\u2502                        ENV: CSM_CONTAINER_MODE                                                                     \u2502\n\u2502                        DEFAULT: CSMDOCKER                                                                          \u2502\n\u2502    --web-help          Open the web documentation                                                                  \u2502\n\u2502    --help              Show this message and exit.                                                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"commands/scenario_data_downloader/","title":"Scenario Data Download","text":"<p>Help command</p> <pre><code>&gt; csm-orc fetch-scenariorun-data --help\n\n Usage: csm-orc fetch-scenariorun-data [OPTIONS]                                                                      \n\n Uses environment variables to call the download_scenario_data function Requires a valid Azure connection either      \n with:                                                                                                                \n\n  \u2022 The AZ cli command: az login                                                                                      \n  \u2022 A triplet of env var AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET                                        \n\n Requires env var CSM_API_URL     The URL to a Cosmotech API                                                          \n Requires env var CSM_API_SCOPE   The identification scope of a Cosmotech API                                         \n\n\u256d\u2500 OPTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --organization-id                     o-##########  The id of an organization in the cosmotech api              \u2502\n\u2502                                                        ENV: CSM_ORGANIZATION_ID                                    \u2502\n\u2502                                                        [required]                                                  \u2502\n\u2502 *  --workspace-id                        w-##########  The id of a workspace in the cosmotech api                  \u2502\n\u2502                                                        ENV: CSM_WORKSPACE_ID                                       \u2502\n\u2502                                                        [required]                                                  \u2502\n\u2502 *  --scenario-id                         s-##########  The id of a scenario in the cosmotech api                   \u2502\n\u2502                                                        ENV: CSM_SCENARIO_ID                                        \u2502\n\u2502                                                        [required]                                                  \u2502\n\u2502 *  --dataset-absolute-path               PATH          A local folder to store the main dataset content            \u2502\n\u2502                                                        ENV: CSM_DATASET_ABSOLUTE_PATH                              \u2502\n\u2502                                                        [required]                                                  \u2502\n\u2502 *  --parameters-absolute-path            PATH          A local folder to store the parameters content              \u2502\n\u2502                                                        ENV: CSM_PARAMETERS_ABSOLUTE_PATH                           \u2502\n\u2502                                                        [required]                                                  \u2502\n\u2502    --write-json/--no-write-json                        Toggle writing of parameters in json format                 \u2502\n\u2502                                                        ENV: WRITE_JSON                                             \u2502\n\u2502                                                        DEFAULT: no-write-json                                      \u2502\n\u2502    --write-csv/--no-write-csv                          Toggle writing of parameters in csv format                  \u2502\n\u2502                                                        ENV: WRITE_CSV                                              \u2502\n\u2502                                                        DEFAULT: write-csv                                          \u2502\n\u2502    --fetch-dataset/--no-fetch-dataset                  Toggle fetching datasets                                    \u2502\n\u2502                                                        ENV: FETCH_DATASET                                          \u2502\n\u2502                                                        DEFAULT: fetch-dataset                                      \u2502\n\u2502    --web-help                                          Open the web documentation                                  \u2502\n\u2502    --help                                              Show this message and exit.                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"commands/simulation_to_adx/","title":"Simulation to ADX connector","text":"<p>Help command</p> <pre><code>&gt; csm-orc send-to-adx --help\n\n Usage: csm-orc send-to-adx [OPTIONS]                                                                                 \n\n Uses environment variables to send content of CSV files to ADX Requires a valid Azure connection either with:        \n\n  \u2022 The AZ cli command: az login                                                                                      \n  \u2022 A triplet of env var AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET                                        \n\n\u256d\u2500 OPTIONS \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 *  --dataset-absolute-path                   PATH  A local folder to store the main dataset content                \u2502\n\u2502                                                    ENV: CSM_DATASET_ABSOLUTE_PATH                                  \u2502\n\u2502                                                    [required]                                                      \u2502\n\u2502 *  --parameters-absolute-path                PATH  A local folder to store the parameters content                  \u2502\n\u2502                                                    ENV: CSM_PARAMETERS_ABSOLUTE_PATH                               \u2502\n\u2502                                                    [required]                                                      \u2502\n\u2502 *  --simulation-id                           UUID  the Simulation Id to add to records                             \u2502\n\u2502                                                    ENV: CSM_SIMULATION_ID                                          \u2502\n\u2502                                                    [required]                                                      \u2502\n\u2502 *  --adx-uri                                 URI   the ADX cluster path (URI info can be found into ADX cluster    \u2502\n\u2502                                                    page)                                                           \u2502\n\u2502                                                    ENV: AZURE_DATA_EXPLORER_RESOURCE_URI                           \u2502\n\u2502                                                    [required]                                                      \u2502\n\u2502 *  --adx-ingest-uri                          URI   The ADX cluster ingest path (URI info can be found into ADX     \u2502\n\u2502                                                    cluster page)                                                   \u2502\n\u2502                                                    ENV: AZURE_DATA_EXPLORER_RESOURCE_INGEST_URI                    \u2502\n\u2502                                                    [required]                                                      \u2502\n\u2502 *  --database-name                           NAME  The targeted database name                                      \u2502\n\u2502                                                    ENV: AZURE_DATA_EXPLORER_DATABASE_NAME                          \u2502\n\u2502                                                    [required]                                                      \u2502\n\u2502    --send-parameters/--no-send-parameters          whether or not to send parameters (parameters path is mandatory \u2502\n\u2502                                                    then)                                                           \u2502\n\u2502                                                    ENV: CSM_SEND_DATAWAREHOUSE_PARAMETERS                          \u2502\n\u2502                                                    DEFAULT: no-send-parameters                                     \u2502\n\u2502    --send-datasets/--no-send-datasets              whether or not to send datasets (parameters path is mandatory   \u2502\n\u2502                                                    then)                                                           \u2502\n\u2502                                                    ENV: CSM_SEND_DATAWAREHOUSE_DATASETS                            \u2502\n\u2502                                                    DEFAULT: no-send-datasets                                       \u2502\n\u2502    --wait/--no-wait                                Toggle waiting for the ingestion results                        \u2502\n\u2502                                                    ENV: WAIT_FOR_INGESTION                                         \u2502\n\u2502                                                    DEFAULT: no-wait                                                \u2502\n\u2502    --web-help                                      Open the web documentation                                      \u2502\n\u2502    --help                                          Show this message and exit.                                     \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre>"},{"location":"tutorial/","title":"Tutorials","text":"<p>A list of tutorials to start getting used to the run-orchestrator</p> <p> My first orchestration</p> <p>A first look at how the orchestrator works, how to create commands and run them in order</p> <p> My first orchestration</p> <p> Concerning configuration</p> <p>Now that we know how to run commands we want to configure them</p> <p> Concerning configuration</p> <p> Brewery</p> <p>A more in depth use of the orchestrator in conjunction with a CosmoTech Simulator</p> <p> Brewery</p> <p> Brewery (Legacy)</p> <p>A more in depth use of the orchestrator in conjunction with a CosmoTech Simulator, based on the Cosmo Tech API v2.X</p> <p> Brewery</p>"},{"location":"tutorial/brewery/","title":"Integration with a CosmoTech Simulator","text":"<p>Objective</p> <ul> <li>Combine previous tutorials and Cosmo Tech Simulator to be able to apply changes to a simulation instance</li> </ul> <p>Prerequisites</p> <ul> <li>You need to have completed the \"Brewery\" onboarding for CosmoTech projects</li> <li>You need a local version of the \"Brewery\" solution (full code available here)</li> </ul> <p>Potential Issues</p> <p>A known issue exists with graphical commands. Adding the Environment Variable <code>PATH</code> and <code>PYTHONPATH</code> (or set <code>useSystemEnvironment</code> to <code>true</code>) to a step  using a Cosmo Tech Simulator is required for the Simulator to run </p>","tags":["Brewery","Tutorial"]},{"location":"tutorial/brewery/#reminder-model-project","title":"Reminder : Model + Project","text":"<p>The full simulator files can be found with the tag  Complete-model on the repository.</p> <p>Online view: here</p> Project files<pre><code>MyBrewery/                           |\n\u251c\u2500 ConceptualModel/                  |\n|  \u2514\u2500 MyBrewery.csm.xml              | CoSML Conceptual Model\n\u251c\u2500 Simulation/                       | Simulation instances\n|  \u2514\u2500 Resource/                      | \n|     \u2514\u2500 scenariorun-data/           | Example dataset in CSV\n|        \u2514\u2500 arc_to_Customer.csv      |\n|        \u2514\u2500 Bar.csv                  |\n|        \u2514\u2500 Customer.csv             |\n|     \u2514\u2500 Brewery.ist.xml             | Model instance in XML\n|     \u2514\u2500 CSV_Brewery.ist.xml         | Model instance using CSVs\n|     \u2514\u2500 InstanceCalibration.ini.xml | Initialize an entity using XML\n|  \u2514\u2500 BusinessApp_Simulation.sml.xml | CSV files -&gt; CSV outputs\n|  \u2514\u2500 CSV_Simulation.sml.xml         | CSV files -&gt; graphical results\n|  \u2514\u2500 XML_Simulation.sml.xml         | XML instantiation -&gt; graphical results\n\u251c\u2500 Simulator/                        | \n|  \u2514\u2500 Simulator.sor.xml              | CoSML Simulator\n\u2514\u2500 project.csm                       | Information on your project\n</code></pre> <p>The Brewery conceptual model is very simple: it consists of a Bar entity and a Customer entity,  where the Bar contains the Customer(s).  The Bar can serve the Customers based on customer thirst levels and stock.  It restocks when stock drops below a set restock quantity.</p> <p>Customers have a Thirsty state and a Satisfaction state, which affect each other:  the higher the satisfaction, the higher the chance of becoming thirsty,  and the longer a customer is left thirsty, the lower the satisfaction.  Satisfaction increases when a customer is served.  Satisfaction is also affected by the satisfaction of surrounding customers.</p> <p>For this tutorial we will write our new files in the folder <code>MyBrewery/code/run_templates/orchestrator_tutorial_1</code> (this folder hierarchy will be used in future tutorials too)</p>","tags":["Brewery","Tutorial"]},{"location":"tutorial/brewery/#define-a-set-of-parameters-to-apply","title":"Define a set of parameters to apply","text":"<p>In our simulation we will want to see the effects of variations on the Bar attributes.</p> <p>Our existing CSV based simulations look for 3 attributes to instantiate a Bar :</p> <ul> <li><code>NbWaiters</code>: the number of waiters in our Bar</li> <li><code>RestockQty</code>: the quantity of elements to restock when getting bellow the threshold</li> <li><code>Stock</code>: the Bar initial stock</li> </ul> <p>We will then use those 3 attributes as parameters for our simulations.</p> <p>To store our parameters we will define a JSON file containing them. </p> code/run_templates/orchestrator_tutorial_1/parameters.json<pre><code>[\n  {\n    \"parameterId\": \"Stock\",\n    \"value\": 123\n  },\n  {\n    \"parameterId\": \"RestockQty\",\n    \"value\": 4567\n  },\n  {\n    \"parameterId\": \"NbWaiters\",\n    \"value\": 89\n  }\n]\n</code></pre> About the JSON file format <p>In prevision of future use, we will define a json format close to the one returned by the command: <pre><code>csm-orc fetch-scenariorun-data\n</code></pre> This command will be used later to download data from the Cosmo Tech API</p>","tags":["Brewery","Tutorial"]},{"location":"tutorial/brewery/#apply-our-parameters","title":"Apply our parameters","text":"<p>Having defined our 3 parameters we can now work on a script to apply those to update a given dataset</p> <p>Our script will consist of 3 steps :</p> <ul> <li>Read the original dataset</li> <li>Apply our parameters to the dataset</li> <li>Write the new dataset in a given folder</li> </ul> <p>We will need 3 parameters for the script :</p> <ul> <li>The path to our original dataset</li> <li>The path to our parameter file</li> <li>The path where we want to write our new dataset</li> </ul> <p>Using those information we can write a simple script :</p> code/run_templates/orchestrator_tutorial_1/apply_parameters.py<pre><code>import argparse\nimport json\nimport pathlib\nfrom csv import DictReader\nfrom csv import DictWriter\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description=\"Parameters apply\")\n    parser.add_argument(\"input_path\",\n                        type=str,\n                        help=\"A path containing our original dataset\")\n    parser.add_argument(\"output_path\",\n                        type=str,\n                        help=\"A path where we will write our updated dataset\")\n    parser.add_argument(\"parameters_path\",\n                        type=argparse.FileType('r'),\n                        help=\"A path to a parameters.json file\")\n\n    args = parser.parse_args()\n\n    # Let's make a copy of our original dataset\n    original_dataset_path = pathlib.Path(args.input_path)\n\n    if not original_dataset_path.exists():\n        raise FileNotFoundError(f\"The folder {original_dataset_path} \"\n                                f\"does not exists\")\n\n    dataset_files = dict()\n\n    for _file in original_dataset_path.glob(\"*.csv\"):\n        _file_name = _file.name\n        dataset_files.setdefault(_file_name, [])\n        with _file.open(\"r\") as _file_content:\n            reader = DictReader(_file_content)\n            for row in reader:\n                dataset_files[_file_name].append(row)\n\n    # Now that we made a memory copy of our file let's get our parameters\n\n    with args.parameters_path as _file_parameters:\n        parameters = json.load(_file_parameters)\n        parameters = dict({_p['parameterId']: _p['value']\n                           for _p in parameters})\n\n    # Now we can apply our parameters to our Bar file\n    if 'Bar.csv' not in dataset_files:\n        raise FileNotFoundError(f\"No Bar.csv could be found \"\n                                f\"in the given input folder\")\n\n    bars = dataset_files['Bar.csv']\n\n    for bar in bars:\n        bar['Stock'] = parameters['Stock']\n        bar['NbWaiters'] = parameters['NbWaiters']\n        bar['RestockQty'] = parameters['RestockQty']\n\n    # and now that our dataset got updated we can write it\n\n    target_dataset_path = pathlib.Path(args.output_path)\n    if target_dataset_path.exists() and not target_dataset_path.is_dir():\n        raise FileExistsError(f\"{target_dataset_path} exists \"\n                              f\"and is not a directory\")\n    target_dataset_path.mkdir(parents=True, exist_ok=True)\n\n    for _file_name, _file_content in dataset_files.items():\n        _file_path = target_dataset_path / _file_name\n        with _file_path.open(\"w\") as _file:\n            writer = DictWriter(_file, _file_content[0].keys())\n            writer.writeheader()\n            writer.writerows(_file_content)\n</code></pre> <p>Using that script can do the trick, we can test it :</p> Test run of apply_parameters.py<pre><code>python code/run_templates/orchestrator_tutorial_1/apply_parameters.py Simulation/Resource/scenariorun-data code/run_templates/orchestrator_tutorial_1/scenariorun-data code/run_templates/orchestrator_tutorial_1/parameters.json\ncat code/run_templates/orchestrator_tutorial_1/scenariorun-data/Bar.csv\n# NbWaiters,RestockQty,Stock,id\n# 89,4567,123,MyBar\n</code></pre> <p>We can see that having run the script our <code>Bar.csv</code> got correctly updated with our parameters.</p>","tags":["Brewery","Tutorial"]},{"location":"tutorial/brewery/#run-a-simulation-with-our-updated-parameters","title":"Run a simulation with our updated parameters","text":"About <code>Simulation/Resource/scenariorun-data</code> <p>The folder <code>Simulation/Resource/scenariorun-data</code> is a special folder in docker containers,  it is replaced by a symbolic link to the path <code>/mnt/scenariorun-data</code>  which is in an environment variable called <code>CSM_DATASET_ABSOLUTE_PATH</code></p> <p>We then know that the content of this folder will not be available in a container as is,  and need to keep that in mind for future uses.</p>","tags":["Brewery","Tutorial"]},{"location":"tutorial/brewery_legacy/","title":"Integration with a CosmoTech Simulator","text":"<p>Objective</p> <ul> <li>Create an orchestration file for a CosmoTech Simulator</li> <li>Use existing Solution info to generate an orchestration file and run it locally</li> </ul> <p>Prerequisites</p> <ul> <li>You need to have completed the \"Brewery\" onboarding for CosmoTech projects</li> <li>You need a local version of the \"Brewery\" solution (full code available here)</li> </ul> <p>Potential Issues</p> <p>A known issue exists with graphical commands. Adding the Environment Variable <code>PATH</code> and <code>PYTHONPATH</code> (or set <code>useSystemEnvironment</code> to <code>true</code>) to a step  using a Cosmo Tech Simulator is required for the Simulator to run </p>","tags":["Brewery","Tutorial","Legacy"]},{"location":"tutorial/brewery_legacy/#create-a-new-orchestration-file-for-a-run-template","title":"Create a new orchestration file for a Run Template","text":"<p>In this first part we will look at creating a new orchestration file from scratch.</p> <p>We will first initialize our run template folder</p> create orchestrator_tutorial run template folder<pre><code>mkdir code/run_templates/orchestrator_tutorial\n</code></pre> Info <p>By creating it inside the <code>code/run_templates</code> folder we will make it packaged in future docker images</p>","tags":["Brewery","Tutorial","Legacy"]},{"location":"tutorial/brewery_legacy/#write-a-parameters-file","title":"Write a <code>parameters</code> file","text":"<p>We will create a set of parameters, make them available for the <code>what_if</code> parameter handler defined during the onboarding and then run our simulator.</p> <p>To initialize our parameters, we will use a helper command of <code>csm-orc</code> : <code>init-parameters</code></p> <p>During the onboarding we created the file <code>API/Solution.yaml</code> that contains the API definition of the Solution and the parameters we will be using it to initialize our parameters file. </p> Initialize parameters.json<pre><code>csm-orc init-parameters solution API/Solution.yaml code/run_templates/orchestrator_tutorial/parameters what_if --no-write-csv --write-json\n</code></pre> <p>After running this command we have a folder <code>orchestrator_tutorial</code> initialized with our <code>parameters</code> folder and a <code>parameters.json</code> file</p> code/run_templates/orchestrator_tutorial/parameters/parameters.json<pre><code>[\n  {\n    \"parameterId\": \"stock\",\n    \"value\": \"stock_value\",\n    \"varType\": \"int\",\n    \"isInherited\": false\n  },\n  {\n    \"parameterId\": \"restock_quantity\",\n    \"value\": \"restock_quantity_value\",\n    \"varType\": \"int\",\n    \"isInherited\": false\n  },\n  {\n    \"parameterId\": \"num_waiters\",\n    \"value\": \"num_waiters_value\",\n    \"varType\": \"int\",\n    \"isInherited\": false\n  }\n]\n</code></pre> <p>In the file we can see 3 lines with the <code>value</code> property set to a dummy one (for example <code>\"value\": \"stock_value\"</code>), we need to set those variables before being able to use them.</p> updated parameters.json<pre><code>[\n  {\n    \"parameterId\": \"stock\",\n    \"value\": \"100\",\n    \"varType\": \"int\",\n    \"isInherited\": false\n  },\n  {\n    \"parameterId\": \"restock_quantity\",\n    \"value\": \"25\",\n    \"varType\": \"int\",\n    \"isInherited\": false\n  },\n  {\n    \"parameterId\": \"num_waiters\",\n    \"value\": \"5\",\n    \"varType\": \"int\",\n    \"isInherited\": false\n  }\n]\n</code></pre> <p>Before moving on we will create a folder <code>dataset</code> in the <code>orchestrator_tutorial</code> folder for future use</p> <pre><code>mkdir code/run_templates/orchestrator_tutorial/dataset\n</code></pre> <p>Now that we have a <code>orchestrator_tutorial</code> folder ready to be used we can start working on our orchestration file.</p>","tags":["Brewery","Tutorial","Legacy"]},{"location":"tutorial/brewery_legacy/#define-our-set-of-commands","title":"Define our set of commands","text":"<p>But first we will define which commands we want to run before orchestrating them.</p> <p>For simplicity, we will be using helper commands made available with <code>csm-orc</code> again so that we can keep commands close to the cloud environment.</p> <p>To run our steps we will make use of the <code>run-step</code> command</p> <p>In the onboarding of the brewery you create a run template called <code>what_if</code> we will be making use of its code with no modification.</p> <p>The <code>parameters_handler</code> part make use of 2 environment variables (defined in its code) :</p> <ul> <li><code>CSM_DATASET_ABSOLUTE_PATH</code> : a path to our dataset  </li> <li><code>CSM_PARAMETERS_ABSOLUTE_PATH</code> : a path to our parameters</li> </ul> <p>We previously created the content of our <code>orchestrator_tutorial</code> folder we will be using it there to make our data available.</p> <p>One last step will be to copy the content of our dataset in the folder.</p> run parameter handler step<pre><code>cp Simulation/Resource/scenariorun-data/* code/run_templates/orchestrator_tutorial/dataset\nexport CSM_DATASET_ABSOLUTE_PATH=\"code/run_templates/orchestrator_tutorial/dataset\"\nexport CSM_PARAMETERS_ABSOLUTE_PATH=\"code/run_templates/orchestrator_tutorial/parameters\"\ncsm-orc run-step --template what_if --steps parameters_handler\n</code></pre> <p>By taking a look at the values of the <code>code/run_templates/orchestrator_tutorial/dataset/Bar.csv</code> file we can see that our <code>parameters_handler</code> worked.</p> <p>The next step will be to run our simulation and get our data our of it.</p> <p>We will once more make use of the <code>run-step</code> command to run the <code>engine</code> step, it is a specific step that runs the simulator directly</p> <p>Before running the <code>engine</code> step we need to back up our existing <code>Simulation/Resource/scenariorun-data</code> folder if it exists, and restore it at the end.</p> <p>Then we will copy our dataset in the now empty folder.</p> <p>Warning</p> <p>A limitation on the language makes it required to manually change the dataset we want to use during a simulation. The loader targets the folder <code>Simulation/Resource/scenariorun-data</code> to load the simulation,  thus we will back it up to keep our original dataset replace the content with our new data and run the simulation  before replacing the back-up in its original folder.</p> code/run_templates/orchestrator_tutorial/replace_scenariorun_data.sh<pre><code>if [ -e \"Simulation/Resource/scenariorun-data\" ] || [ -L \"Simulation/Resource/scenariorun-data\" ]; then\n  mv Simulation/Resource/scenariorun-data Simulation/Resource/scenariorun-data.back\nfi \nln -s $(realpath $CSM_DATASET_ABSOLUTE_PATH) Simulation/Resource/scenariorun-data\n</code></pre> code/run_templates/orchestrator_tutorial/restore_scenariorun_data.sh<pre><code>if [ -e \"Simulation/Resource/scenariorun-data.back\" ] || [ -L \"Simulation/Resource/scenariorun-data.back\" ]; then\n  rm Simulation/Resource/scenariorun-data \n  mv Simulation/Resource/scenariorun-data.back Simulation/Resource/scenariorun-data \nfi\n</code></pre> <p>Using the environment variable <code>CSM_Simulation</code> we can control which simulation to run.</p> run simulation<pre><code>export CSM_SIMULATION=\"CSV_Simulation\"\ncsm-orc run-step --template what_if --steps engine\n</code></pre> <p>Using those 3 commands we are now able to run a local simulation and set back our state.</p> <p>We now have been able to apply our parameter handler and then run our simulation using 3 environment variables,  we are ready to write our orchestration file.</p>","tags":["Brewery","Tutorial","Legacy"]},{"location":"tutorial/brewery_legacy/#writing-the-orchestration-file","title":"Writing the orchestration file","text":"<p>Following the previous tutorials it is easy to write a simple orchestration file :</p> code/run_templates/orchestrator_tutorial/run.json<pre><code>{\n  \"steps\": [\n    {\n      \"id\": \"parameter-handler\",\n      \"command\": \"csm-orc\",\n      \"arguments\": [\n        \"run-step\", \"--template\",\n        \"what_if\", \"--steps\",\n        \"parameters_handler\"\n      ],\n      \"description\": \"Apply the \\\"what-if\\\" parameter handler\",\n      \"environment\": {\n        \"CSM_DATASET_ABSOLUTE_PATH\": {\n          \"description\": \"A folder containing our dataset\"\n        },\n        \"CSM_PARAMETERS_ABSOLUTE_PATH\": {\n          \"description\": \"A folder containing our parameters\"\n        }\n      }\n    },\n    {\n      \"id\": \"replace-data\",\n      \"command\": \"bash\",\n      \"arguments\": [\n        \"code/run_templates/orchestrator_tutorial/replace_scenariorun_data.sh\"\n      ],\n      \"description\": \"Replace exisiting scenariorun-data with our dataset\",\n      \"environment\": {\n        \"CSM_DATASET_ABSOLUTE_PATH\": {\n          \"description\": \"A folder containing our dataset\"\n        }\n      },\n      \"precedents\": [\n        \"parameter-handler\"\n      ]\n    },\n    {\n      \"id\": \"engine\",\n      \"command\": \"csm-orc\",\n      \"arguments\": [\n        \"run-step\", \"--template\",\n        \"what_if\", \"--steps\",\n        \"engine\"\n      ],\n      \"description\": \"Run the simulation targeted by CSM_SIMULATION\",\n      \"useSystemEnvironment\": true,\n      \"environment\": {\n        \"CSM_SIMULATION\": {\n          \"description\": \"The simulation file to run\",\n          \"defaultValue\": \"BusinessApp_Simulation\"\n        }\n      },\n      \"precedents\": [\n        \"replace-data\"\n      ]\n    },\n    {\n      \"id\": \"restore-data\",\n      \"command\": \"bash\",\n      \"arguments\": [\n        \"code/run_templates/orchestrator_tutorial/restore_scenariorun_data.sh\"\n      ],\n      \"description\": \"Restore scenariorun-data if it was existing before the run\",\n      \"precedents\": [\n        \"engine\"\n      ]\n    }\n  ]\n}\n</code></pre> <p>Warning</p> <p>In the <code>engine</code> step we set the field <code>\"useSystemEnvironment\": true</code>,  it allows to use the system environment variables that are set for graphical interfaces. Without it (or if set to <code>false</code>) we would have crashes with the simulator when using the QT Consumers locally.</p> <p> In a docker environment we won't have access to a graphical interface, so even with this field the QT Consumers will crash.</p> <p>We can then easily run this file :</p> run run.json<pre><code>export CSM_DATASET_ABSOLUTE_PATH=\"code/run_templates/orchestrator_tutorial/dataset\"\nexport CSM_PARAMETERS_ABSOLUTE_PATH=\"code/run_templates/orchestrator_tutorial/parameters\"\nexport CSM_SIMULATION=\"CSV_Simulation\"\ncsm-orc run code/run_templates/orchestrator_tutorial/run.json\n</code></pre>","tags":["Brewery","Tutorial","Legacy"]},{"location":"tutorial/first/","title":"My first orchestration","text":"<p>Objective</p> <ul> <li>Set up an orchestration project</li> <li>Create a few scripts to organize</li> <li>Create an orchestration file to run our scripts</li> </ul>","tags":["Tutorial"]},{"location":"tutorial/first/#setting-up-our-project","title":"Setting up our project","text":"<p>During this tutorial we will start from a clean installation of <code>csm-orc</code> and work our way to an orchestrated solution.</p> Set up our project<pre><code># First we will create a new folder for our project\nmkdir MyFirstOrchestrationProject\ncd MyFirstOrchestrationProject\n# Now that we are in our project folder we will set up the orchestrator using a python venv\n# We create the venv in the folder `.venv`\npython -m venv .venv\n# We activate the venv\n. .venv/bin/activate\n# Now we can install the orchestrator using pip\npip install cosmotech-run-orchestrator\n# We can check that our installation worked by running the orchestrator help\ncsm-orc --help\n</code></pre> <p>After all that our project is ready to start</p>","tags":["Tutorial"]},{"location":"tutorial/first/#creating-our-first-scripts","title":"Creating our first scripts","text":"<p>In this part we will create 2 simple python script that will interact by using a common file, the first script should write the first N members of the Fibonacci sequence on the file, and the second one will display them.</p> FibonacciDisplay fibonacci.py<pre><code>import argparse\n\nparser = argparse.ArgumentParser(description=\"Fibonacci printer\")\nparser.add_argument(\"n\",\n                    type=int,\n                    help=\"The max rank of the fibonacci sequence to write\")\nparser.add_argument(\"filename\",\n                    type=argparse.FileType('w'),\n                    help=\"The file to write to\")\n\n\ndef fibonacci_sequence(n: int = 0):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n    with args.filename as f:\n        for v in fibonacci_sequence(args.n):\n            f.write(f\"{v}\\n\")\n</code></pre> display_file.py<pre><code>import argparse\n\nparser = argparse.ArgumentParser(description=\"File printer\")\nparser.add_argument(\"filename\",\n                    type=argparse.FileType('r'),\n                    help=\"The file to print\")\n\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n\n    with args.filename as f:\n        for v in f.readlines():\n            print(v.strip())\n</code></pre> <p>Let's try our scripts</p> <p>Running those two files is easy <pre><code>python fibonacci.py 10 fib.txt\npython display_file.py fib.txt\n</code></pre> This should display the following lines <pre><code>0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n</code></pre></p>","tags":["Tutorial"]},{"location":"tutorial/first/#write-a-first-orchestration","title":"Write a first orchestration","text":"<p>Now that we have our two files, we want to create an orchestration file to run them.</p> <p>An orchestration file is a json file following the given JSON schema</p> JSON-schema <p>The following schema can be impressive, but we will go through most of it in the next points. JSON-schema<pre><code>{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://cosmotech.com/run_template.schema.json\",\n  \"title\": \"Run Template\",\n  \"description\": \"A run template description\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"commandTemplates\": {\n      \"description\": \"A list of Commands Templates\",\n      \"type\": \"array\",\n      \"items\": {\n        \"description\": \"A Command Template describe a single executable with default properties\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"description\": \"The Id of the Command Template\",\n            \"pattern\": \"^\\\\S*$\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the command template\"\n          },\n          \"command\": {\n            \"type\": \"string\",\n            \"description\": \"The root bash command necessary to execute the template\"\n          },\n          \"arguments\": {\n            \"type\": \"array\",\n            \"description\": \"The list of default arguments passed to the command\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"useSystemEnvironment\": {\n            \"type\": \"boolean\",\n            \"description\": \"Should the system environment be fully passed to the command ?\"\n          },\n          \"environment\": {\n            \"type\": \"object\",\n            \"description\": \"The default list of Environment Variables required for the command\",\n            \"patternProperties\": {\n              \".+\": {\n                \"$ref\": \"#/$defs/environmentVariable\"\n              }\n            },\n            \"minProperties\": 1\n          }\n        },\n        \"additionalProperties\": false,\n        \"required\": [\n          \"id\",\n          \"command\"\n        ]\n      }\n    },\n    \"steps\": {\n      \"description\": \"A list of Steps descriptors\",\n      \"type\": \"array\",\n      \"items\": {\n        \"description\": \"A Step is a single instance of a Command that is scheduled to be run, can use an existing command or define its own\",\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"description\": \"The Id of the Step\",\n            \"pattern\": \"^\\\\S*$\"\n          },\n          \"description\": {\n            \"type\": \"string\",\n            \"description\": \"A description of the step (override command template description)\"\n          },\n          \"commandId\": {\n            \"type\": \"string\",\n            \"description\": \"An Id for an existing command\"\n          },\n          \"command\": {\n            \"type\": \"string\",\n            \"description\": \"The root bash command necessary to execute the command\"\n          },\n          \"arguments\": {\n            \"type\": \"array\",\n            \"description\": \"The list of arguments passed to the command (replace the default one)\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"useSystemEnvironment\": {\n            \"type\": \"boolean\",\n            \"description\": \"Should the system environment be fully passed to the command ?\"\n          },\n          \"environment\": {\n            \"type\": \"object\",\n            \"description\": \"The list of Environment Variables defined for the command (replace the default one)\",\n            \"patternProperties\": {\n              \".+\": {\n                \"$ref\": \"#/$defs/environmentVariable\"\n              }\n            },\n            \"minProperties\": 1\n          },\n          \"precedents\": {\n            \"type\": \"array\",\n            \"description\": \"A list of steps that have to be run before this one\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"additionalProperties\": false,\n        \"oneOf\": [\n          {\n            \"required\": [\n              \"id\",\n              \"command\"\n            ]\n          },\n          {\n            \"required\": [\n              \"id\",\n              \"commandId\"\n            ]\n          }\n        ]\n      }\n    }\n  },\n  \"required\": [\n    \"steps\"\n  ],\n  \"$defs\": {\n    \"environmentVariable\": {\n      \"type\": \"object\",\n      \"description\": \"A environment variable descriptor\",\n      \"properties\": {\n        \"defaultValue\": {\n          \"type\": \"string\",\n          \"description\": \"The default value of the required variable, if not set, the variable has to be set in the system\"\n        },\n        \"value\": {\n          \"type\": \"string\",\n          \"description\": \"The effective value of the required variable, will override any system value\"\n        },\n        \"description\": {\n          \"type\": \"string\",\n          \"description\": \"A description of the required Environment Variable for documentation reasons\"\n        }\n      },\n      \"additionalProperties\": false\n    }\n  }\n}\n</code></pre></p>","tags":["Tutorial"]},{"location":"tutorial/first/#the-first-step","title":"The first step","text":"<p>In the schema we can see that it is divided in two parts : - the CommandTemplate - the Step</p> <p>For this first orchestration file we will only use steps.</p> <p>Let's take a look at an example step</p> simple_step.json<pre><code>{\n  \"steps\": [\n    {\n      \"id\": \"echo-foo-bar\",\n      \"command\": \"echo\",\n      \"arguments\": [ \"foo\", \"bar\" ]\n    }\n  ]\n}\n</code></pre> <p>In this minimal file we can see one <code>step</code> with the id <code>echo-foo-bar</code>  that runs the command <code>echo</code> with the arguments <code>foo</code> and <code>bar</code>.</p> <p>This orchestration file is valid following the JSON schema as we have at least 1 element in <code>steps</code>, and the element as at least an <code>id</code> and a <code>command</code></p> <p>We can run this orchestration file with the following command :</p> run simple_step.json<pre><code>csm-orc run simple_step.json\n# [YYYY/MM/DD-HH:mm:SS] INFO     ===      Run     ===\n# [YYYY/MM/DD-HH:mm:SS] INFO     Starting step echo-foo-bar\n# foo bar\n# [YYYY/MM/DD-HH:mm:SS] INFO     Done running step echo-foo-bar\n# [YYYY/MM/DD-HH:mm:SS] INFO     ===     Results    ===\n# [YYYY/MM/DD-HH:mm:SS] INFO     Step echo-foo-bar\n#                                Command: echo foo bar\n#                                Status: Done \n</code></pre> <p>On line 4 we can see the result of the command <code>echo foo bar</code> which is defined in the step.</p> <p>Now using this basis we will write our commands in an orchestration file using the same options as the previous example</p> <p>Let's try our scripts as an orchestration file</p> <p>run.json<pre><code>{\n  \"steps\": [\n    {\n      \"id\": \"run-fibo\",\n      \"command\": \"python\",\n      \"arguments\": [ \"fibonacci.py\", \"10\", \"fib.txt\" ]\n    },\n    {\n      \"id\": \"run-display\",\n      \"command\": \"python\",\n      \"arguments\": [ \"display_file.py\", \"fib.txt\" ],\n      \"precedents\": [ \"run-fibo\" ]\n    }\n  ]\n}\n</code></pre> Now we can run our file using the orchestrator run our first orchestration<pre><code>csm-orc run run.json\n</code></pre></p> <p>In the example <code>run.json</code> you can see on line 12 the apparition of the key-words <code>precedents</code>,  it is used to order our operations.</p> <p>Here by setting the step <code>run-fibo</code> as a precedent to the step <code>run-display</code>  we ensure that the first script will run before the second.</p> <p>And now we created a simple example of orchestration file to run some of our scripts. In the next tutorial we will look at how to use CommandTemplates to re-use possibly complex commands, and Environment Variables to change the effect of our commands.</p>","tags":["Tutorial"]},{"location":"tutorial/second/","title":"Concerning configuration","text":"<p>Objective</p> <ul> <li>Add environment variables to our script</li> <li>Use environment variables in our orchestration</li> <li>Use CommandTemplate to combine close commands</li> </ul>","tags":["Tutorial"]},{"location":"tutorial/second/#taking-a-look-at-environment-variables","title":"Taking a look at Environment Variables","text":"<p>We will start in the same folder as the previous tutorial : <code>MyFirstOrchestrationProject</code>  and augment it to use some Environment Variables to configure our commands.</p> <p>First we will start by modifying our scripts to now accept an environment variable for the file path</p> FibonacciDisplay fibonacci.py<pre><code>import argparse\nimport os\n\nparser = argparse.ArgumentParser(description=\"Fibonacci printer\")\nparser.add_argument(\"n\",\n                    type=int,\n                    help=\"The max rank of the fibonacci sequence to write\")\nparser.add_argument(\"--filename\",\n                    type=argparse.FileType('w'),\n                    help=\"The file to write to\",\n                    default=os.environ.get(\"FIBO_FILE_PATH\"))\n\n\ndef fibonacci_sequence(n: int = 0):\n    a, b = 0, 1\n    for _ in range(n):\n        yield a\n        a, b = b, a + b\n\n\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n    with args.filename as f:\n        for v in fibonacci_sequence(args.n):\n            f.write(f\"{v}\\n\")\n</code></pre> display_file.py<pre><code>import argparse\nimport os\n\nparser = argparse.ArgumentParser(description=\"File printer\")\nparser.add_argument(\"--filename\",\n                    type=argparse.FileType('r'),\n                    help=\"The file to print\",\n                    default=os.environ.get(\"FIBO_FILE_PATH\"))\n\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n\n    with args.filename as f:\n        for v in f.readlines():\n            print(v.strip())\n</code></pre> <p>Those modifications will allow us to set an Environment Variable <code>FIBO_FILE_PATH</code> that will be used for our file name</p> <p>Let's try our scripts</p> <p>Running those two files is easy <pre><code>export FIBO_FILE_PATH=fib_second.txt\npython fibonacci.py 10\npython display_file.py\n</code></pre> Without environment variable we would run the following commands <pre><code>python fibonacci.py 10 --filename fib_second.txt\npython display_file.py --filename fib_second.txt\n</code></pre> Both ways should display the following lines <pre><code>0\n1\n1\n2\n3\n5\n8\n13\n21\n34\n</code></pre></p> <p>Now that our commands work we will look at the orchestration file to configure those environment variables</p> run_env.json<pre><code>{\n  \"steps\": [\n    {\n      \"id\": \"run-fibo\",\n      \"command\": \"python\",\n      \"arguments\": [ \"fibonacci.py\", \"10\" ],\n      \"environment\": {\n        \"FIBO_FILE_PATH\": {\n          \"description\": \"A file run-fibo will write to\"\n        }\n      }\n    },\n    {\n      \"id\": \"run-display\",\n      \"command\": \"python\",\n      \"arguments\": [ \"display_file.py\" ],\n      \"precedents\": [ \"run-fibo\" ],\n      \"environment\": {\n        \"FIBO_FILE_PATH\": {\n          \"description\": \"A file run-display will read and print to stdout\"}\n      }\n    }\n  ]\n}\n</code></pre> <p>We added 2 definitions of our <code>FIBO_FILE_PATH</code> to the steps, so we can try to run our script</p> Run the orchestrator without the environment variable<pre><code># First we remove the definition of FIBO_FILE_PATH from the environment for the example\nunset FIBO_FILE_PATH\ncsm-orc run run_env.json\n# [YYYY/MM/DD-HH:mm:SS] ERROR    Missing environment values\n# [YYYY/MM/DD-HH:mm:SS] ERROR     - FIBO_FILE_PATH \n# [YYYY/MM/DD-HH:mm:SS] ERROR    Missing environment variables, check the logs\n</code></pre> <p>We can see that without defining our environment variable issues are displayed before the run.</p> <p>If we wanted to know which environment variables are required for our orchestration script we can do the following</p> Getting information about environment variables<pre><code>csm-orc run run_env.json --display-env\n# [YYYY/MM/DD-HH:mm:SS] INFO     Environment variable defined for run_env.json\n# [YYYY/MM/DD-HH:mm:SS] INFO      - FIBO_FILE_PATH:\n#                                   - A file run-fibo will write to\n#                                   - A file run-display will read and print to stdout\n</code></pre> <p>We can see that all descriptions of a variable are made available.</p> <p>Let's give a value to <code>FIBO_FILE_PATH</code> and run our command</p> Run the orchestrator with the environment variable<pre><code>FIBO_FILE_PATH=fib_second.txt csm-orc run run_env.json\n# [YYYY/MM/DD-HH:mm:SS] INFO     ===      Run     ===\n# [YYYY/MM/DD-HH:mm:SS] INFO     Starting step run-fibo\n# [YYYY/MM/DD-HH:mm:SS] INFO     Done running step run-fibo\n# [YYYY/MM/DD-HH:mm:SS] INFO     Starting step run-display\n# 0\n# 1\n# 1\n# 2\n# 3\n# 5\n# 8\n# 13\n# 21\n# 34\n# [YYYY/MM/DD-HH:mm:SS] INFO     Done running step run-display\n# [YYYY/MM/DD-HH:mm:SS] INFO     ===     Results    ===\n# [YYYY/MM/DD-HH:mm:SS] INFO     Step run-fibo\n#                                Command: python fibonacci.py 10\n#                                Environment:\n#                                - FIBO_FILE_PATH: A file run-fibo will write to\n#                                Status: Done\n# [YYYY/MM/DD-HH:mm:SS] INFO     Step run-display\n#                                Command: python display_file.py\n#                                Environment:\n#                                - FIBO_FILE_PATH: A file run-display will read and print to stdout\n</code></pre> <p>We can see that our orchestrator works now.</p>","tags":["Tutorial"]},{"location":"tutorial/second/#use-environment-variables-as-argument","title":"Use Environment Variables as Argument","text":"<p>To add more configuration to our file lets use an environment variable for the <code>run-fibo</code> step argument.</p> run_env_arg.json<pre><code>{\n  \"steps\": [\n    {\n      \"id\": \"run-fibo\",\n      \"command\": \"python\",\n      \"arguments\": [ \"fibonacci.py\", \"$FIBO_COUNT\" ],\n      \"environment\": {\n        \"FIBO_FILE_PATH\": {\n          \"description\": \"A file run-fibo will write to\"\n        },\n        \"FIBO_COUNT\": {\n          \"description\": \"The rank of the fibonacci sequence run-fibo will write to\",\n          \"defaultValue\": \"10\"\n        }\n      }\n    },\n    {\n      \"id\": \"run-display\",\n      \"command\": \"python\",\n      \"arguments\": [ \"display_file.py\" ],\n      \"precedents\": [ \"run-fibo\" ],\n      \"environment\": {\n        \"FIBO_FILE_PATH\": {\n          \"description\": \"A file run-display will read and print to stdout\"}\n      }\n    }\n  ]\n}\n</code></pre> <p>In this file we defined an environment variable that will be used as an argument for our command (by using it as an argument preceded by <code>$</code>),  that way we don't need to modify our script.</p> <p>We also defined a <code>defaultValue</code> for the argument,  ensuring that even if the environment variable is not defined a default value is used.</p> Run without the new variableRun with the new variable Run as previously<pre><code>export FIBO_FILE_PATH=fib_second.txt\ncsm-orc run run_env_arg.json\n# [YYYY/MM/DD-HH:mm:SS] INFO     ===      Run     ===\n# [YYYY/MM/DD-HH:mm:SS] INFO     Starting step run-fibo\n# [YYYY/MM/DD-HH:mm:SS] INFO     Done running step run-fibo\n# [YYYY/MM/DD-HH:mm:SS] INFO     Starting step run-display\n# 0\n# 1\n# 1\n# 2\n# 3\n# 5\n# 8\n# 13\n# 21\n# 34\n# [YYYY/MM/DD-HH:mm:SS] INFO     Done running step run-display\n# [YYYY/MM/DD-HH:mm:SS] INFO     ===     Results    ===\n# [YYYY/MM/DD-HH:mm:SS] INFO     Step run-fibo\n#                                Command: python fibonacci.py 10\n#                                Environment:\n#                                - FIBO_FILE_PATH: A file run-fibo will write to\n#                                - FIBO_COUNT: The rank of the fibonacci sequence run-fibo will write to\n#                                Status: Done\n# [YYYY/MM/DD-HH:mm:SS] INFO     Step run-display\n#                                Command: python display_file.py\n#                                Environment:\n#                                - FIBO_FILE_PATH: A file run-display will read and print to stdout\n</code></pre> Run the orchestrator with the new environment variable<pre><code>export FIBO_FILE_PATH=fib_second.txt\nexport FIBO_COUNT=8\ncsm-orc run run_env_arg.json\n# [YYYY/MM/DD-HH:mm:SS] INFO     ===      Run     ===\n# [YYYY/MM/DD-HH:mm:SS] INFO     Starting step run-fibo\n# [YYYY/MM/DD-HH:mm:SS] INFO     Done running step run-fibo\n# [YYYY/MM/DD-HH:mm:SS] INFO     Starting step run-display\n# 0\n# 1\n# 1\n# 2\n# 3\n# 5\n# 8\n# 13\n# [YYYY/MM/DD-HH:mm:SS] INFO     Done running step run-display\n# [YYYY/MM/DD-HH:mm:SS] INFO     ===     Results    ===\n# [YYYY/MM/DD-HH:mm:SS] INFO     Step run-fibo\n#                                Command: python fibonacci.py 10\n#                                Environment:\n#                                - FIBO_FILE_PATH: A file run-fibo will write to\n#                                - FIBO_COUNT: The rank of the fibonacci sequence run-fibo will write to\n#                                Status: Done\n# [YYYY/MM/DD-HH:mm:SS] INFO     Step run-display\n#                                Command: python display_file.py\n#                                Environment:\n#                                - FIBO_FILE_PATH: A file run-display will read and print to stdout\n</code></pre>","tags":["Tutorial"]},{"location":"tutorial/second/#use-commandtemplate-to-reduce-copy","title":"Use CommandTemplate to reduce copy","text":"<p>We now have 2 <code>steps</code> that use the same base <code>command</code> and a common Environment Variable.  Let's make use of the <code>CommandTemplate</code> to reduce the number of time we need to impact our steps.</p> run_with_template.json<pre><code>{\n  \"steps\": [\n    {\n      \"id\": \"run-fibo\",\n      \"commandId\": \"python-with-fibo-file\",\n      \"arguments\": [ \"fibonacci.py\", \"$FIBO_COUNT\" ],\n      \"environment\": {\n        \"FIBO_COUNT\": {\n          \"description\": \"The rank of the fibonacci sequence run-fibo will write to\",\n          \"defaultValue\": \"10\"\n        }\n      }\n    },\n    {\n      \"id\": \"run-display\",\n      \"commandId\": \"python-with-fibo-file\",\n      \"arguments\": [ \"display_file.py\" ],\n      \"precedents\": [ \"run-fibo\" ]\n    }\n  ],\n  \"commandTemplates\": [\n    {\n      \"id\": \"python-with-fibo-file\",\n      \"command\": \"python\",\n      \"environment\": {\n        \"FIBO_FILE_PATH\": {\n          \"description\": \"A file available to the command\"\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>We grouped the common part of the steps in a new command template called <code>python-with-fibo-file</code>,  then replaced the <code>command</code> of our steps by its <code>commandId</code>.</p> <p>Now we can call the new file as previously</p> Run the orchestrator with a command template<pre><code>export FIBO_FILE_PATH=fib_second.txt\nexport FIBO_COUNT=8 \ncsm-orc run run_with_template.json\n# [YYYY/MM/DD-HH:mm:SS] INFO     ===      Run     ===\n# [YYYY/MM/DD-HH:mm:SS] INFO     Starting step run-fibo\n# [YYYY/MM/DD-HH:mm:SS] INFO     Done running step run-fibo\n# [YYYY/MM/DD-HH:mm:SS] INFO     Starting step run-display\n# 0\n# 1\n# 1\n# 2\n# 3\n# 5\n# 8\n# 13\n# [YYYY/MM/DD-HH:mm:SS] INFO     Done running step run-display\n# [YYYY/MM/DD-HH:mm:SS] INFO     ===     Results    ===\n# [YYYY/MM/DD-HH:mm:SS] INFO     Step run-fibo\n#                                Command: python fibonacci.py $FIBO_COUNT\n#                                Environment:\n#                                - FIBO_COUNT: The rank of the fibonacci sequence run-fibo will write to\n#                                - FIBO_FILE_PATH: A file available to the command\n#                                Status: Done\n# [YYYY/MM/DD-HH:mm:SS] INFO     Step run-display\n#                                Command: python display_file.py\n#                                Environment:\n#                                - FIBO_FILE_PATH: A file available to the command\n#                                Status: Done\n</code></pre> <p>Now you can create command templates, use environment variables to configure your scripts, and set some values for those.</p>","tags":["Tutorial"]},{"location":"tags/","title":"Tags","text":"<p>Following is a list of relevant tags : </p>"},{"location":"tags/#brewery","title":"Brewery","text":"<ul> <li>Brewery</li> <li>Integration with a CosmoTech Simulator</li> </ul>"},{"location":"tags/#legacy","title":"Legacy","text":"<ul> <li>Integration with a CosmoTech Simulator</li> </ul>"},{"location":"tags/#tutorial","title":"Tutorial","text":"<ul> <li>Brewery</li> <li>Integration with a CosmoTech Simulator</li> <li>My First Orchestrator</li> <li>Concerning Configuration</li> </ul>"}]}